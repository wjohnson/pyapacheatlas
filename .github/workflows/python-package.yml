# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches:
      - master
      - release/**
    paths-ignore:
      - 'docs/**'
      - 'samples/**'
  pull_request:
    branches: [ master ]
    paths-ignore:
      - 'docs/**'
      - 'samples/**'
  release:
    types: [created]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest wheel
        pip install 'openpyxl>=3.0'
        pip install 'requests>=2.0'
        pip install .
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 ./pyapacheatlas --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 ./pyapacheatlas --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest tests/unit

  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'created'
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.7
      uses: actions/setup-python@v2
      with:
        python-version: 3.7

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install wheel

    - name: Create the artifacts
      run: |
        python setup.py bdist_wheel sdist

    - name: What version am I using?
      run: |
        CODE_VERSION=$(python setup.py --version)
        TAG_VERSION=$(echo $GITHUB_REF | sed 's#.*/##')
        if [[ "$TAG_VERSION" == "$CODE_VERSION" ]]; then echo "Match"; else echo "No Match" && exit 1; fi
        echo ::set-output name=package_version::$TAG_VERSION
      id: vnum      

    - name: Create Release
      if: github.event_name == 'release' && github.event.action == 'created'
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.vnum.package_version }}
        release_name: Release ${{ steps.vnum.package_version }}
        draft: false
        prerelease: false

    - name: Publish to Test PyPI
      if: github.event_name == 'release' && github.event.action == 'created'
      uses: pypa/gh-action-pypi-publish@v1.4.1
      with:
        user: __token__
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository_url: https://test.pypi.org/legacy/
        verbose: true

    - name: Publish to PyPI
      if: github.event_name == 'release' && github.event.action == 'created'
      uses: pypa/gh-action-pypi-publish@v1.4.1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
